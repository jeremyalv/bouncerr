<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java"/>

    <!-- File Structure Checks -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <module name="NewlineAtEndOfFile"/>
    <module name="LineLength">
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">
        <!-- Indentation -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="8"/>
            <property name="lineWrappingIndentation" value="8"/>
            <property name="arrayInitIndent" value="4"/>
        </module>

        <!-- Braces -->
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LAMBDA, METHOD_REF"/>
        </module>
        <module name="LeftCurly">
            <!-- Open brace "{" appears at the end of the same line -->
            <property name="option" value="eol"/>
        </module>
        <module name="RightCurly">
            <!-- Closing brace "}" starts a line by itself indented -->
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <!-- Whitespace -->
        <module name="SingleSpaceSeparator">
            <!-- Prevents double spaces -->
        </module>
        <module name="WhitespaceAfter">
            <!-- Keyword followed by parenthesis separated by space -->
            <!-- Comma in argument list followed by space -->
            <!-- Casts followed by space -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>

        <module name="MethodParamPad">
            <!-- No space between method name and opening parenthesis -->
        </module>
        <module name="ParenPad">
            <!-- No space inside parentheses -->
        </module>
        <module name="TypecastParenPad">
            <!-- No space inside type cast parentheses -->
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS, TYPECAST, ARRAY_DECLARATOR, INDEX_OP, METHOD_REF"/>
            <property name="allowLineBreaks" value="false"/>
        </module>

        <!-- Naming Conventions -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="TypeName">
            <property name="id" value="regularClassName"/>
            <!-- mixed case, first letter caps. No Test suffix. -->
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$(?<!Test)$"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, RECORD_DEF"/>
        </module>
        <module name="TypeName">
            <property name="id" value="testClassName"/>
            <!-- test classes must end in Test. -->
            <property name="format" value="^[A-Z][a-zA-Z0-9]*Test$"/>
            <property name="tokens" value="CLASS_DEF"/>
        </module>
        <module name="MethodName">
            <property name="id" value="regularMethodName"/>
            <!-- verbs, mixed case, first letter lowercase. -->
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="MethodName">
            <property name="id" value="testMethodName"/>
            <!-- camelCase_withUnderscore_separators for tests. -->
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
        </module>
        <module name="ParameterName">
            <!-- Mixed case, lowercase first letter -->
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
        </module>
        <module name="MemberName">
            <!-- Mixed case, lowercase first letter. -->
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalVariableName">
            <!-- Mixed case, lowercase first letter. Avoid single char except throwaway. -->
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/> <!-- Allow i, j, k in loops -->
        </module>
        <module name="ConstantName"/>

        <!-- Imports and ImportOrder -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="ImportOrder">
            <property name="option" value="top"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
            <!-- com.gojek should refer to your internal package prefixes -->
            <property name="groups" value="/^java\./, /^javax\./, com.gojek, *"/>
            <property name="ordered" value="true"/>
            <!-- Package/Import statements separated by blank lines -->
            <property name="separated" value="true"/>
            <property name="separatedStaticGroups" value="false"/>
        </module>

        <!-- Blocks -->
        <module name="EmptyBlock">
            <property name="option" value="statement"/> <!-- Requires statements within blocks, not just comments -->
            <property name="tokens" value="LITERAL_WHILE, LITERAL_TRY, LITERAL_FINALLY, LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, INSTANCE_INIT, STATIC_INIT, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_CASE, LITERAL_DEFAULT"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignore(d)?"/>
        </module>

        <!-- Class Design -->
        <module name="HideUtilityClassConstructor"/>
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
        </module>
        <module name="OneTopLevelClass"/> <!-- A single public class per file -->

        <!-- Coding -->
        <module name="EqualsHashCode"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="NoFinalizer"/>
        <module name="DefaultComesLast"/>
        <module name="FallThrough"/>
        <module name="MultipleVariableDeclarations"/> <!-- One declaration per line -->
        <module name="ModifierOrder"/> <!-- Sun modifier order -->
        <module name="EmptyStatement"/> <!-- Discourage standalone ';' -->
        <module name="DeclarationOrder"/> <!-- Class vars, instance vars, methods -->

        <!-- Comments -->
        <module name="TodoComment">
            <!-- Flag TODO/todo/FIXME as errors -->
            <property name="format" value="(TODO)|(todo)|(FIXME)"/>
            <property name="severity" value="error"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="blockSingleLineComments"/>
            <!-- Forbid // comments -->
            <property name="format" value="//.*"/>
            <property name="message" value="Single-line comments (//) are forbidden."/>
            <property name="severity" value="error"/>
            <property name="ignoreComments" value="false"/>
        </module>
        <module name="RegexpMultiline">
            <property name="id" value="blockBlockComments"/>
             <!-- Forbid /* */ comments (excluding Javadoc /** */) -->
            <property name="format" value="/\*(?!\*)[^*]*\*+(?:[^/*][^*]*\*+)*/"/>
             <property name="message" value="Block comments (/* */) are forbidden. Use Javadoc (/** */) only if absolutely necessary."/>
            <property name="severity" value="error"/>
        </module>

        <!-- Miscellaneous -->
        <module name="UpperEll"/>
        <module name="ArrayTypeStyle" value="java"/>

        <!-- Blank Lines / Separation -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="false"/> <!-- Enforce separation between fields -->
            <property name="allowMultipleEmptyLines" value="false"/> <!-- Enforce exactly one blank line -->
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/> <!-- Enforce single blank lines inside methods -->
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
    </module>
</module>
